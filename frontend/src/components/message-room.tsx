"use client";
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/ULSOqxSrnsa
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Chivo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { useState, useEffect } from "react";
import Link from "next/link";
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator } from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Textarea } from "@/components/ui/textarea";
import Cookies from "js-cookie";
import api from "@/lib/axios";
import { useParams, useRouter } from "next/navigation";

export function MessageRoom() {
  const router = useRouter();
  const { room_name } = useParams();
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [ws, setWs] = useState(null);
  const username = sessionStorage.getItem("username");
  useEffect(() => {
    if (!room_name) return;

    // Fetch messages when room_name is available
    const fetchMessages = async () => {
      try {
        const response = await api.get(`/rooms/${room_name}/messages`, {
          headers: {
            Authorization: `${Cookies.get('token')}`,
          },
        });
        setMessages(response.data);
        console.log(response.data)
      } catch (error) {
        console.error('Failed to fetch messages:', error);
      }
    };

    fetchMessages();
  }, [room_name]);

  useEffect(() => {
    if (!room_name) return;
  
    // WebSocket setup
    const socket = new WebSocket(`ws://localhost:8080/ws/chat?room_name=${room_name}&username=${username}`);
  
    socket.onopen = () => {
      console.log('WebSocket connection established.');
    };
  
    socket.onmessage = (event) => {
      const message = JSON.parse(event.data);
      setMessages((prevMessages) => [...prevMessages, message]);
    };
  
    socket.onclose = () => {
      console.log('WebSocket connection closed.');
    };
  
    setWs(socket);
  
    return () => {
      socket.close();
    };
  }, [room_name]);

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    if (newMessage.trim() === '') return;
  
    if (ws) {
      const message = {
        room_name,
        username: username, // Ensure this value is correct
        content: newMessage,
        created_at: new Date().toISOString() // Adding timestamp
      };
      console.log("Sending message:", message); // Debugging
    ws.send(JSON.stringify(message));
    setNewMessage('');
    }
  };


  const handleLogout = async () => {
    try {
      // Get the token from the cookie
      const token = Cookies.get("token");
  
      if (token) {
        await api.post("/auth/logout", null, {
          headers: {
            Authorization: `${token}`,
          },
        });
  
        // Remove the token and clear session storage
        Cookies.remove("token");
        sessionStorage.clear();
  
        // Redirect to the sign-in page
        router.push("/signin");
      }
    } catch (error) {
      console.error("Failed to logout:", error);
    }
  };

  return (
    <div className="flex min-h-[100dvh] flex-col bg-background">
      <header className="flex h-20 w-full shrink-0 items-center px-4 md:px-6">
        <Link href="#" className="flex items-center justify-center" prefetch={false}>
          <span className="ml-2 text-lg font-semibold">DynoSpeak | Bienvenido @{username}</span>
        </Link>
        <div className="ml-auto flex gap-2 items-center">
          <DropdownMenu>
            <DropdownMenuTrigger>
              <Avatar>
                <AvatarImage src="/path/to/avatar.png" alt="User Avatar" />
                <AvatarFallback>{username ? username[0] : "U"}</AvatarFallback>
              </Avatar>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={() => router.push("/profile")}>Profile</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handleLogout}>Logout</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>
      <main className="flex-1">
        <section className="flex-1 flex flex-col">
          <div className="flex-1 overflow-auto p-4 flex flex-col">
            <div className="text-lg font-bold mb-4">{room_name} room</div>
            {messages.map((message, index) => (
              <div key={index} className="flex items-start gap-4 mt-4">
                <Avatar className="w-8 h-8 border">
                  <AvatarImage src="/placeholder-user.jpg" alt="Image" />
                  <AvatarFallback>{message.username?.[0]}</AvatarFallback>
                  </Avatar>
                <div className="grid gap-1">
                <div className="font-bold">{message.username}</div>
      <div className="text-sm text-gray-500">{new Date(message.created_at).toLocaleTimeString()}</div>
      <div className="prose text-muted-foreground">
        <p>{message.content}</p>
      </div>
                </div>
              </div>
            ))}
          </div>
          <div className="border-t p-4">
            <form className="flex gap-2" onSubmit={handleSubmit}>
              <Textarea
                placeholder="Type your message..."
                className="flex-1 min-h-[40px] resize-none"
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
              />
              <Button type="submit">Send</Button>
            </form>
          </div>
        </section>
      </main>
      <footer className="flex flex-col gap-2 sm:flex-row py-6 w-full shrink-0 items-center px-4 md:px-6 border-t">
        <p className="text-xs text-muted-foreground">&copy; 2024 Chatter. All rights reserved.</p>
        <nav className="sm:ml-auto flex gap-4 sm:gap-6">
          <Link href="#" className="text-xs hover:underline underline-offset-4" prefetch={false}>
            Terms of Service
          </Link>
          <Link href="#" className="text-xs hover:underline underline-offset-4" prefetch={false}>
            Privacy
          </Link>
        </nav>
      </footer>
    </div>
  );
}