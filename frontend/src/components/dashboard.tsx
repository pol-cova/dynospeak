"use client";

/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/ppxPnRXkZYS
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Chivo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { useState, useEffect } from "react";
import Link from "next/link";
import api from "@/lib/axios";
import { useRouter } from "next/navigation";
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator } from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Card, CardContent } from "@/components/ui/card";
import Cookies from "js-cookie";
import { headers } from "next/headers";

export function Dashboard() {
  const [username, setUsername] = useState<string | null>(null);
  const [rooms, setRooms] = useState([]);
  const [newRoomName, setNewRoomName] = useState("");
  const router = useRouter();

  useEffect(() => {
    const storedUsername = sessionStorage.getItem("username");
    if (storedUsername) {
      setUsername(storedUsername);
    } else {
      // Redirect to sign-in if username is not available
      router.push("/signin");
    }

    // Fetch available chat rooms
    fetchRooms();
  }, [router]);

  const fetchRooms = async () => {
    try {
      const response = await api.get("/rooms");
      setRooms(response.data || []);
    } catch (error) {
      console.error("Failed to fetch rooms:", error);
    }
  };

  const handleLogout = async () => {
    try {
      // Get the token from the cookie
      const token = Cookies.get("token");
  
      if (token) {
        await api.post("/auth/logout", null, {
          headers: {
            Authorization: `${token}`,
          },
        });
  
        // Remove the token and clear session storage
        Cookies.remove("token");
        sessionStorage.clear();
  
        // Redirect to the sign-in page
        router.push("/signin");
      }
    } catch (error) {
      console.error("Failed to logout:", error);
    }
  };

  const handleCreateRoom = async (e: any) => {
    e.preventDefault();
    try {
      const response = await api.post(
        "user/chatrooms/new",
        { room_name: newRoomName },
        {
          headers: {
            Authorization: `${Cookies.get("token")}`,
          },
        }
      );
      console.log(response);
      setNewRoomName("");
      fetchRooms();
    } catch (error) {
      console.error("Failed to create room:", error);
    }
  };

  return (
    <div className="flex min-h-[100dvh] flex-col bg-background">
      <header className="flex h-20 w-full shrink-0 items-center px-4 md:px-6">
        <Link href="#" className="flex items-center justify-center" prefetch={false}>
          <span className="ml-2 text-lg font-semibold">DynoSpeak | Bienvenido @{username}</span>
        </Link>
        <div className="ml-auto flex gap-2 items-center">
          <DropdownMenu>
            <DropdownMenuTrigger>
              <Avatar>
                <AvatarImage src="/path/to/avatar.png" alt="User Avatar" />
                <AvatarFallback>{username ? username[0] : "U"}</AvatarFallback>
              </Avatar>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={() => router.push("/profile")}>Profile</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handleLogout}>Logout</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>
      <main className="flex-1">
        <section className="flex flex-col items-center justify-center px-4 md:px-6">
          <form onSubmit={handleCreateRoom} className="w-full max-w-md mb-6">
            <label htmlFor="roomName" className="block text-sm font-medium text-muted-foreground">
              Create a new chat room
            </label>
            <div className="flex mt-2">
              <input
                id="roomName"
                value={newRoomName}
                onChange={(e) => setNewRoomName(e.target.value)}
                placeholder="Enter room name"
                className="flex-1 rounded-md border border-input bg-background px-4 py-2 text-sm shadow-sm focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring"
                required
              />
              <Button type="submit" className="ml-2">
                Create
              </Button>
            </div>
          </form>
          <div className="max-w-4xl w-full grid grid-cols-2 md:grid-cols-4 gap-4">
            {rooms.map((room) => (
              <Card key={room.id} className="bg-muted text-muted-foreground">
                <CardContent className="flex flex-col items-center justify-center h-32 gap-4">
                  <div className="text-2xl font-bold">{room.room_name}</div>
                  <Button variant="outline" onClick={() => router.push(`/rooms/${room.room_name}`)}>
                    Enter Room
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>
      </main>
      <footer className="flex flex-col gap-2 sm:flex-row py-6 w-full shrink-0 items-center px-4 md:px-6 border-t">
        <p className="text-xs text-muted-foreground">&copy; 2024 DynoSpeak. All rights reserved.</p>
        <nav className="sm:ml-auto flex gap-4 sm:gap-6">
          <Link href="#" className="text-xs hover:underline underline-offset-4" prefetch={false}>
            Terms of Service
          </Link>
          <Link href="#" className="text-xs hover:underline underline-offset-4" prefetch={false}>
            Privacy
          </Link>
        </nav>
      </footer>
    </div>
  );
}
